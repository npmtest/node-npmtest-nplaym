{"/home/travis/build/npmtest/node-npmtest-nplaym/test.js":"/* istanbul instrument in package npmtest_nplaym */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nplaym/lib.npmtest_nplaym.js":"/* istanbul instrument in package npmtest_nplaym */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nplaym = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nplaym = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nplaym/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nplaym && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nplaym */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nplaym\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nplaym.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nplaym.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nplaym.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nplaym.__dirname + '/lib.npmtest_nplaym.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nplaym/node_modules/nplaym/bin/nplaym":"#!/usr/bin/env node\n'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar keypress = _interopDefault(require('keypress'));\nvar pty = _interopDefault(require('child_pty'));\nvar _ = _interopDefault(require('lodash'));\nvar colors = require('colors');\nvar child_process = require('child_process');\n\nvar HEIGHT = process.stdout.rows;\nvar WIDTH = process.stdout.columns;\nvar LEFTWALL = 10;\nvar RIGHTWALL = 10;\nvar MIDWIDTH = ~ ~(WIDTH / 2);\nvar MIDHEIGHT = ~ ~(HEIGHT / 2);\nvar FPS = 15;\nvar FRAMERATE = ~ ~(1000 / FPS);\nvar DIFFICULTY = 50; // out of 100\nvar STARTTIME = new Date().getTime();\nvar PLAYERLINE = ~ ~(HEIGHT / 4 + HEIGHT / 2);\nvar LOSEMSGS = ['You lose! Give up, go home, and sell your keyboard on ebay.\\nNo packages have been installed. Because life is hard.', 'You have failed in your mission. The packages have won.\\nWhat will become of us now?', 'Game over.\\nNo packages were harmed or installed in the playing of this game.', 'You failed to wrangle the packages into their node_modules/ corral.\\nBetter luck next time, cowboy.', 'Your ship crashed into an errant piece of installation debris and now you\\'ll have to start all over again.\\nThis is probably quite embarassing for you.', 'Uh oh. Looks like you failed to install any packages.\\nHave you tried just mashing the spacebar?'];\n\n// Terminal object\n// Allows for controlling the terminal by outputting control characters\nvar terminal = {\n    // Terminal escape character\n    // escape_code: '\\033',\n    escape_code: '\\x1B',\n\n    // Display attributes reset\n    // reset_code: '\\033[0m',\n    reset_code: '\\x1B[0m',\n\n    // Write a message in the terminal\n    write: function write(message) {\n        process.stdout.write(message);\n        return this;\n    },\n\n    // Print one or more new line characters\n    nl: function nl(n) {\n        n = n || 1;\n        for (var i = 0; i < n; i++) {\n            process.stdout.write('\\n');\n        }\n        return this;\n    },\n\n    // Move the terminal cursor\n    move: function move(x, y) {\n        x = x || 0;\n        y = y || 0;\n\n        var command = this.escape_code + '[';\n        if (undefined !== x && 0 < x) {\n            command += ++x;\n        }\n        if (undefined !== y && 0 < y) {\n            command += ';' + ++y;\n        }\n\n        process.stdout.write(command + 'H');\n        return this;\n    },\n\n    // Move the terminal cursor up `x` positions\n    up: function up(x) {\n        process.stdout.write(this.escape_code + '[' + x + 'A');\n        return this;\n    },\n\n    // Move the terminal cursor down x positions\n    down: function down(x) {\n        process.stdout.write(this.escape_code + '[' + x + 'B');\n        return this;\n    },\n\n    // Move the terminal cursor `p` positions right\n    right: function right(p) {\n        process.stdout.write(this.escape_code + '[' + p + 'C');\n        return this;\n    },\n\n    // Move the terminal cursor `p` positions left\n    left: function left(p) {\n        process.stdout.write(this.escape_code + '[' + p + 'D');\n        return this;\n    },\n\n    // Clear all characters from the terminal screen\n    clear: function clear() {\n        process.stdout.write(this.escape_code + '[2J' + this.escape_code + '[;H');\n        return this;\n    },\n\n    // Clear the line the cursor is at\n    clearLine: function clearLine() {\n        process.stdout.write(this.escape_code + '[2K');\n        return this;\n    },\n\n    // Clear the next `n` characters from the current cursor position.\n    clearCharacters: function clearCharacters(n) {\n        this.write(new Array(n + 2).join(' ')).left(n + 2);\n        return this;\n    },\n\n    hideCursor: function hideCursor() {\n        process.stdout.write(this.escape_code + '[?25l');\n    },\n\n    showCursor: function showCursor() {\n        process.stdout.write(this.escape_code + '[?25h');\n    }\n};\n\nvar utils = {\n  getRandom: function getRandom(arr) {\n    return arr[~ ~(Math.random() * arr.length)];\n  }\n};\n\nfunction Monster(text) {\n  var _this = this;\n\n  this.s = text;\n  this.dangerZone = [];\n\n  this.getPlacement = function () {\n    var randomStart = ~ ~(Math.random() * (WIDTH - RIGHTWALL - LEFTWALL));\n    randomStart = Math.min(randomStart, WIDTH - _this.s.length);\n    randomStart = Math.max(randomStart, 0);\n    return randomStart;\n  };\n\n  this.createDangerZone = function () {\n    for (var i = this.left; i < this.left + this.s.length; i++) {\n      this.dangerZone.push(i);\n    }\n  };\n\n  Object.assign(this, {\n    type: 'mob',\n    up: 0,\n    left: this.getPlacement(),\n    colour: 'red',\n    dead: false,\n    colourIndex: 0\n  });\n\n  this.createDangerZone();\n  this.tick = function () {\n    _this.up = _this.up + 1;\n    if (_this.dead) {\n      _this.turnToDebris();\n    }\n    if (_this.up > HEIGHT) {\n      _this.remove();\n    }\n  };\n  this.turnToDebris = function () {\n    var str = '';\n    for (var i = 0; i < _this.s.length; i++) {\n      var debrisChoices = ';,.`\\'\"'.split('');\n      str += utils.getRandom(debrisChoices);\n    }\n    _this.s = str;\n    var colourChoices = ['yellow', 'grey', 'black'];\n    if (_this.colour !== 'black') {\n      _this.colour = colourChoices[_this.colourIndex];\n      _this.colourIndex++;\n    } else {\n      _this.remove();\n    }\n  };\n  this.remove = function () {\n    gameState.splice(gameState.indexOf(_this), 1);\n  };\n}\n\nfunction Bullet(xCoord) {\n  var _this2 = this;\n\n  this.type = 'bullet';\n  this.left = xCoord;\n  this.s = '|';\n  this.colour = 'magenta';\n  this.up = PLAYERLINE - 1;\n  this.speed = 2;\n  this.tick = function () {\n    _this2.up = _this2.up - 1;\n    if (_this2.dead) {\n      _this2.remove();\n    }\n  };\n  this.dead = false;\n  this.remove = function () {\n    gameState.splice(gameState.indexOf(_this2), 1);\n  };\n}\n\nvar setting = void 0;\nvar args$1 = void 0;\nvar Parser = {};\n\nParser.set = function (terms) {\n  var strippedTerms = _.clone(terms);\n  _.remove(strippedTerms, function (i) {\n    return (/^-/.test(i)\n    );\n  });\n  if (strippedTerms[0] === 'install' || strippedTerms[0] === 'i') {\n    if (strippedTerms.length === 1) {\n      setting = 'npmInstall';\n    } else {\n      setting = 'npmInstallSomething';\n    }\n  } else {\n    setting = 'default';\n  }\n  args$1 = strippedTerms;\n};\n\nParser.parse = function (d) {\n  switch (setting) {\n    case 'npmInstall':\n      var bits = d.toString().match(/:[a-zA-Z0-9\\-_]+/);\n      if (bits) {\n        var packName = bits[0].slice(1);\n        return packName;\n      }\n      return utils.getRandom(args$1);\n      break;\n    case 'npmInstallSomething':\n      var moreBits = d.toString().match(/:[a-zA-Z0-9\\-_]+/);\n      if (moreBits) {\n        var depName = moreBits[0].slice(1);\n        return depName;\n      }\n      return args$1;\n      break;\n    default:\n      var justLetters = d.toString().replace(/[^a-zA-Z0-9]+/g, '');\n      var noColourCodes = justLetters.replace(/[\\d]+m/, ' ');\n      return noColourCodes;\n      break;\n  }\n};\n\nvar args = process.argv.slice(2);\n\nParser.set(args);\n\nvar npmOutput = '';\n\nvar npm = pty.spawn('npm', args, {\n  cwd: process.cwd()\n});\n\nvar installingPackages = {};\n\nfunction startListening() {\n  npm.stdout.on('data', function (d) {\n    var str = d.toString();\n    if (str.length > 10) {\n      npmOutput = str;\n    }\n    // We store it as keys in an object to quickly uniq them\n    var output = Parser.parse(d);\n    if (!output) {\n      return;\n    }\n    var pkgs = void 0;\n    if (typeof output === 'string') {\n      pkgs = output.split(' ');\n    } else {\n      pkgs = output;\n    }\n    pkgs.forEach(function (pkg) {\n      installingPackages[pkg] = 1;\n    });\n  });\n\n  npm.stdout.on('end', function (d) {\n    gameOver(true);\n  });\n\n  npm.on('close', function (d) {\n    gameOver(true);\n  });\n\n  process.on('exit', function () {\n    npm.kill('SIGINT');\n    terminal.showCursor();\n  });\n\n  process.stdin.setRawMode(true);\n\n  terminal.hideCursor();\n\n  keypress(process.stdin);\n\n  process.stdin.on('keypress', function (chunk, key) {\n    if (!key) return;\n    if (key.ctrl && key.name == 'c') {\n      process.exit(1);\n    }\n    switch (key.name) {\n      case 'left':\n        terminal.right(1);\n        player.left = Math.max(player.left - 1, LEFTWALL);\n        break;\n      case 'right':\n        terminal.left(1);\n        player.left = Math.min(player.left + 1, WIDTH - RIGHTWALL);\n        break;\n      case 'space':\n        terminal.left(1);\n        fire();\n        break;\n    }\n  });\n}\n\nfunction paintScreen() {\n  terminal.clear();\n\n  for (var line = 0; line < HEIGHT; line++) {\n\n    paintMovers(line);\n\n    if (line === 1) {\n      // Replace control chars, letters and numbers\n      var out = npmOutput.replace(/[\\x00-\\x1F\\x7F-\\x9Fa-zA-Z0-9\\?\\[:\\s]/g, '');\n      var progressTxt = 'NPM: ' + out;\n      terminal.write(progressTxt);\n      terminal.left(progressTxt.length);\n    }\n\n    if (line === 2) {\n      var scoreTxt = 'Score: ' + SCORE;\n      terminal.write(scoreTxt);\n      terminal.left(scoreTxt.length);\n    }\n\n    terminal.down(1);\n  }\n\n  gameState.filter(function (item) {\n    return item.type === 'bullet' || item.type === 'mob';\n  }).forEach(function (item) {\n    item.tick();\n  });\n}\n\nfunction cursorReturn(item) {\n  terminal.left(item.left + item.s.length);\n}\n\nfunction getEntities(line) {\n  return gameState.filter(function (item) {\n    return item.up === line;\n  }).sort(function (a, b) {\n    return a.left > b.left;\n  });\n}\n\nfunction paintMovers(line) {\n  var entities = getEntities(line);\n  var bulletsBelow = gameState.filter(function (item) {\n    return item.up === line + 1 && item.type === 'bullet';\n  });\n\n  if (entities.length > 0) {\n    entities.forEach(function (item) {\n      terminal.right(item.left).write(item.s[item.colour]);\n      cursorReturn(item);\n    });\n    checkBullet(entities.concat(bulletsBelow));\n    if (line === PLAYERLINE) {\n      checkIntersects(entities);\n    }\n  }\n}\n\nfunction writeCentre(msg, offset) {\n  terminal.nl(MIDHEIGHT).write(msg).nl(MIDHEIGHT);\n}\n\nfunction startSequence(startGameFn) {\n  var _loop = function _loop(i) {\n    setTimeout(function () {\n      var str = ' '.repeat(i) + '>'.blue;\n      terminal.write(str);\n      terminal.left(str.length);\n\n      if (i === MIDWIDTH) {\n        str = ' '.repeat(i) + '^'.blue;\n\n        var _loop2 = function _loop2(j) {\n          setTimeout(function () {\n            terminal.clearLine().nl().write(str);\n\n            if (j === PLAYERLINE - 1) {\n              var _loop3 = function _loop3(k) {\n                setTimeout(function () {\n                  terminal.nl();\n                  if (k === HEIGHT - PLAYERLINE - 1) {\n                    startGameFn();\n                  }\n                }, 20 * k);\n              };\n\n              for (var k = 0; k < HEIGHT - PLAYERLINE; k++) {\n                _loop3(k);\n              }\n            }\n          }, 20 * j);\n        };\n\n        for (var j = 0; j < PLAYERLINE; j++) {\n          _loop2(j);\n        }\n      }\n    }, 10 * i);\n  };\n\n  // TODO: Sort out this callback cancer\n  for (var i = 0; i < MIDWIDTH + 1; i++) {\n    _loop(i);\n  }\n}\n\nvar SCORE = 0;\nvar ALIVE = true;\nvar LOOP = void 0;\n\nvar gameState = [{\n  type: 'player',\n  s: '^',\n  up: PLAYERLINE,\n  left: MIDWIDTH,\n  colour: 'blue'\n}];\n\nvar player = gameState[0];\n\nfunction checkBullet(entities) {\n  var bullets = entities.filter(function (i) {\n    return i.type === 'bullet';\n  });\n  var mobs = entities.filter(function (i) {\n    return i.type === 'mob';\n  });\n  var bulletsToGo = [];\n  bullets.forEach(function (bullet, bi) {\n    // console.log(item.left, dangerZone)\n    mobs.forEach(function (mob, mi) {\n      if (intersects(bullet.left, mob.dangerZone) && !bullet.dead && !mob.dead) {\n        bullet.dead = true;\n        bullet.colour = 'black';\n        mob.s = 'x'.repeat(mob.s.length);\n        mob.dead = true;\n        mob.colour = 'yellow';\n        addScore(mob.s.length);\n      }\n    });\n  });\n}\n\nfunction checkIntersects(entities) {\n  var playerPos = entities.find(function (item) {\n    return item.type === 'player';\n  }).left;\n  var mobs = entities.filter(function (i) {\n    return i.type === 'mob';\n  });\n  mobs.forEach(function (mob) {\n    if (intersects(playerPos, mob.dangerZone) && !mob.dead) {\n      ALIVE = false;\n      setTimeout(gameOver, 1000);\n    }\n  });\n}\n\nfunction timeDifference(d, dd) {\n  var sec = 1000;\n  var minute = sec * 60;\n  var hour = minute * 60;\n  var ms = Math.abs(d - dd);\n\n  var hours = parseInt(ms / hour, 10);\n  ms -= hours * hour;\n  var minutes = parseInt(ms / minute, 10);\n  ms -= minutes * minute;\n  var secs = parseInt(ms / sec, 10);\n  ms -= secs * sec;\n\n  return [hours ? hours + ' hours,' : '', minutes ? minutes + ' minutes,' : '', secs + ' seconds'].join(' ').trim();\n}\n\nfunction gameOver(win) {\n  var playTime = timeDifference(new Date().getTime(), STARTTIME);\n  if (win) {\n    writeCentre('You win! Packages installed!\\nYour score was ' + SCORE + '.\\nInstallation took ' + playTime);\n  } else {\n    writeCentre(utils.getRandom(LOSEMSGS) + ('\\nYour score was ' + SCORE + '.\\nYou lasted ' + playTime));\n  }\n  process.exit(0);\n}\n\nfunction intersects(pos, dangerZone) {\n  if (dangerZone.indexOf(pos) !== -1) {\n    return true;\n  }\n  return false;\n}\n\nfunction generateMobs() {\n  var packages = Object.keys(installingPackages);\n  if (packages.length > 0 && Math.random() * 100 < DIFFICULTY) {\n    var lastMsg = packages.pop();\n    gameState.push(new Monster(lastMsg));\n  }\n}\n\nfunction addScore(int) {\n  SCORE = SCORE + int;\n}\n\nfunction startGame() {\n  startSequence(function () {\n    LOOP = interval(runLoop, FRAMERATE);\n  });\n}\n\nfunction fire() {\n  gameState.push(new Bullet(player.left));\n}\n\nfunction interval(func, wait, times) {\n  var interv = function (w, t) {\n    return function () {\n      if (typeof t === \"undefined\" || t-- > 0) {\n        setTimeout(interv, w);\n        try {\n          func.call(null);\n        } catch (e) {\n          t = 0;\n          throw e.toString();\n        }\n      }\n    };\n  }(wait, times);\n\n  setTimeout(interv, wait);\n};\n\nfunction runLoop() {\n  if (ALIVE) {\n    // term.clear();\n    generateMobs();\n    paintScreen();\n  }\n};\n\nvar npmVersion = parseInt(child_process.execSync('npm --version').toString());\nif (npmVersion < 3) {\n  console.log('This game only works properly with NPM 3, please consider upgrading!');\n}\n\nstartListening();\nstartGame();","/home/travis/build/npmtest/node-npmtest-nplaym/node_modules/nplaym/src/classes.js":"import { HEIGHT, WIDTH, LEFTWALL, RIGHTWALL, MIDWIDTH, MIDHEIGHT, FPS, FRAMERATE, DIFFICULTY, STARTTIME, PLAYERLINE } from './constants.js';\nimport util from './util.js';\nimport { gameState } from './game.js';\n\nfunction Monster (text) {\n  this.s = text;\n  this.dangerZone = [];\n\n  this.getPlacement = () => {\n    let randomStart = ~~(Math.random() * (WIDTH - RIGHTWALL - LEFTWALL));\n    randomStart = Math.min(randomStart, WIDTH - this.s.length);\n    randomStart = Math.max(randomStart, 0);\n    return randomStart;\n  }\n\n  this.createDangerZone = function () {\n    for (var i = this.left; i < this.left + this.s.length; i++) {\n      this.dangerZone.push(i);\n    }\n  }\n\n  Object.assign(this, {\n    type: 'mob',\n    up: 0,\n    left: this.getPlacement(),\n    colour: 'red',\n    dead: false,\n    colourIndex: 0\n  });\n\n  this.createDangerZone();\n  this.tick = () => {\n    this.up = this.up + 1;\n    if (this.dead) {\n      this.turnToDebris();\n    }\n    if (this.up > HEIGHT) {\n      this.remove();\n    } \n  }\n  this.turnToDebris = () => {\n    let str = '';\n    for (var i = 0; i < this.s.length; i++) {\n      const debrisChoices = ';,.`\\'\"'.split('');\n      str += util.getRandom(debrisChoices);\n    }\n    this.s = str;\n    const colourChoices = ['yellow', 'grey', 'black'];\n    if (this.colour !== 'black') {\n      this.colour = colourChoices[this.colourIndex];\n      this.colourIndex++;\n    } else {\n      this.remove();\n    }\n  }\n  this.remove = () => {\n    gameState.splice(gameState.indexOf(this), 1);\n  }\n}\n\nfunction Bullet (xCoord) {\n  this.type = 'bullet';\n  this.left = xCoord;\n  this.s = '|';\n  this.colour = 'magenta';\n  this.up = PLAYERLINE - 1;\n  this.speed = 2;\n  this.tick = () => {\n    this.up = this.up - 1;\n    if (this.dead) {\n      this.remove();\n    }\n  }\n  this.dead = false;\n  this.remove = () => {\n    gameState.splice(gameState.indexOf(this), 1);\n  }\n}\n\nexport { Monster, Bullet };","/home/travis/build/npmtest/node-npmtest-nplaym/node_modules/nplaym/src/constants.js":"const HEIGHT = process.stdout.rows;\nconst WIDTH = process.stdout.columns;\nconst LEFTWALL = 10;\nconst RIGHTWALL = 10;\nconst MIDWIDTH = ~~(WIDTH / 2);\nconst MIDHEIGHT = ~~(HEIGHT / 2);\nconst FPS = 15;\nconst FRAMERATE = ~~(1000 / FPS);\nconst DIFFICULTY = 50; // out of 100\nconst STARTTIME = new Date().getTime();\nconst PLAYERLINE = ~~(HEIGHT / 4 + HEIGHT / 2);\nconst LOSEMSGS = [\n  'You lose! Give up, go home, and sell your keyboard on ebay.\\nNo packages have been installed. Because life is hard.',\n  'You have failed in your mission. The packages have won.\\nWhat will become of us now?',\n  'Game over.\\nNo packages were harmed or installed in the playing of this game.',\n  'You failed to wrangle the packages into their node_modules/ corral.\\nBetter luck next time, cowboy.',\n  'Your ship crashed into an errant piece of installation debris and now you\\'ll have to start all over again.\\nThis is probably quite embarassing for you.',\n  'Uh oh. Looks like you failed to install any packages.\\nHave you tried just mashing the spacebar?'\n];\n\nexport { HEIGHT,\n  WIDTH,\n  LEFTWALL,\n  RIGHTWALL,\n  MIDWIDTH,\n  MIDHEIGHT,\n  FPS,\n  FRAMERATE,\n  DIFFICULTY,\n  STARTTIME,\n  PLAYERLINE,\n  LOSEMSGS\n};","/home/travis/build/npmtest/node-npmtest-nplaym/node_modules/nplaym/src/display.js":"import { HEIGHT, WIDTH, LEFTWALL, RIGHTWALL, MIDWIDTH, MIDHEIGHT, FPS, FRAMERATE, DIFFICULTY, STARTTIME, PLAYERLINE } from './constants.js';\nimport { SCORE, checkIntersects, checkBullet, gameState, player } from './game.js';\nimport { npmOutput } from './io.js';\nimport colors from 'colors';\nimport term from './terminal.js';\n\nfunction paintScreen () {\n  term.clear();\n\n  for (let line = 0; line < HEIGHT; line++) {\n\n    paintMovers(line)\n\n    if (line === 1) {\n      // Replace control chars, letters and numbers\n      const out = npmOutput.replace(/[\\x00-\\x1F\\x7F-\\x9Fa-zA-Z0-9\\?\\[:\\s]/g, '');\n      const progressTxt = `NPM: ${out}`;\n      term.write(progressTxt);\n      term.left(progressTxt.length)\n    }\n\n    if (line === 2) {\n      const scoreTxt = `Score: ${SCORE}`;\n      term.write(scoreTxt);\n      term.left(scoreTxt.length);\n    }\n\n    term.down(1);\n  }\n\n  gameState.filter(item => item.type === 'bullet' || item.type === 'mob')\n    .forEach(item => {\n      item.tick();\n    })\n}\n\nfunction cursorReturn (item) {\n  term.left(item.left + item.s.length)\n}\n\nfunction getEntities (line) {\n  return gameState.filter(item => item.up === line).sort((a, b) => a.left > b.left);\n}\n\nfunction paintMovers (line) {\n  const entities = getEntities(line);\n  const bulletsBelow = gameState.filter(item => item.up === line + 1 && item.type === 'bullet');\n\n  if (entities.length > 0) {\n    entities.forEach(item => {\n      term.right(item.left).write(item.s[item.colour]);\n      cursorReturn(item)\n    })\n    checkBullet(entities.concat(bulletsBelow));\n    if (line === PLAYERLINE) {\n      checkIntersects(entities)\n    }\n  }\n}\n\nfunction writeCentre (msg, offset) {\n  term.nl(MIDHEIGHT).write(msg).nl(MIDHEIGHT);\n}\n\nfunction startSequence (startGameFn) {\n\n  // TODO: Sort out this callback cancer\n  for (let i = 0; i < MIDWIDTH + 1; i++) {\n    setTimeout(function () {\n      let str = ' '.repeat(i) + '>'.blue;\n      term.write(str);\n      term.left(str.length)\n\n      if (i === MIDWIDTH) {\n        str = ' '.repeat(i) + '^'.blue;\n        for (let j = 0; j < PLAYERLINE; j++) {\n          setTimeout(function () {\n            term.clearLine().nl().write(str)\n\n            if (j === PLAYERLINE - 1) {\n              for (let k = 0; k < HEIGHT - PLAYERLINE; k++) {\n                setTimeout(function () { \n                  term.nl();\n                  if (k === HEIGHT - PLAYERLINE - 1) {\n                    startGameFn()\n                  }\n                }, 20 * k)\n              }\n            }\n\n          }, 20 * j)\n        }\n      }\n\n    }, 10 * i)\n  }\n\n}\n\n\nexport { paintScreen, cursorReturn, writeCentre, startSequence };","/home/travis/build/npmtest/node-npmtest-nplaym/node_modules/nplaym/src/game.js":"import { HEIGHT, WIDTH, LEFTWALL, RIGHTWALL, MIDWIDTH, MIDHEIGHT, FPS, FRAMERATE, DIFFICULTY, STARTTIME, PLAYERLINE, LOSEMSGS } from './constants.js';\nimport term from './terminal.js';\nimport { Monster, Bullet } from './classes.js';\nimport { writeCentre, paintScreen, startSequence } from './display.js';\nimport { installingPackages } from './io.js';\nimport util from './util.js'\n\nlet SCORE = 0; \nlet ALIVE = true;\nlet LOOP;\n\nconst gameState = [{\n  type: 'player',\n  s: '^',\n  up: PLAYERLINE,\n  left: MIDWIDTH,\n  colour: 'blue'\n}];\n\nconst player = gameState[0];\n\nfunction checkBullet(entities) {\n  const bullets = entities.filter(i => i.type === 'bullet');\n  const mobs = entities.filter(i => i.type === 'mob');\n  const bulletsToGo = [];\n  bullets.forEach((bullet, bi) => {\n    // console.log(item.left, dangerZone)\n    mobs.forEach((mob, mi) => {\n      if (intersects(bullet.left, mob.dangerZone) && !bullet.dead && !mob.dead) {\n        bullet.dead = true;\n        bullet.colour = 'black';\n        mob.s = 'x'.repeat(mob.s.length);\n        mob.dead = true;\n        mob.colour = 'yellow';\n        addScore(mob.s.length);\n      }\n    })\n  })\n} \n\nfunction checkIntersects (entities) {\n  const playerPos = entities.find(item => item.type === 'player').left;\n  const mobs = entities.filter(i => i.type === 'mob');\n  mobs.forEach(mob => {\n    if (intersects(playerPos, mob.dangerZone) && !mob.dead) {\n      ALIVE = false;\n      setTimeout(gameOver, 1000)\n    }\n  });\n}\n\nfunction timeDifference (d, dd) {\n    const sec = 1000;\n    const minute = sec * 60;\n    const hour = minute * 60;\n    let ms = Math.abs(d - dd);\n\n    const hours = parseInt(ms / hour, 10);\n    ms -= hours * hour;\n    var minutes = parseInt(ms / minute, 10);\n    ms -= minutes * minute;\n    var secs = parseInt(ms / sec, 10);\n    ms -= secs * sec;\n\n    return [\n        hours ? hours + ' hours,' : '',\n        minutes ? minutes + ' minutes,' : '',\n        secs + ' seconds'\n    ].join(' ').trim();\n}\n\nfunction gameOver (win) {\n  const playTime = timeDifference(new Date().getTime(), STARTTIME);\n  if (win) {\n    writeCentre(`You win! Packages installed!\\nYour score was ${SCORE}.\\nInstallation took ${playTime}`);\n  } else {\n    writeCentre(util.getRandom(LOSEMSGS) + `\\nYour score was ${SCORE}.\\nYou lasted ${playTime}`);\n  }\n  process.exit(0);\n}\n\nfunction intersects (pos, dangerZone) {\n  if (dangerZone.indexOf(pos) !== -1 ) {\n    return true;\n  }\n  return false;\n}\n\nfunction generateMobs () {\n  const packages = Object.keys(installingPackages);\n  if (packages.length > 0 && (Math.random() * 100) < DIFFICULTY) {\n    const lastMsg = packages.pop();\n    gameState.push(new Monster(lastMsg));\n  }\n}\n\nfunction addScore (int) {\n  SCORE = SCORE + int;\n}\n\nfunction startGame () {\n  startSequence(function () {\n    LOOP = interval(runLoop, FRAMERATE);\n  })\n}\n\nfunction fire () {\n  gameState.push(new Bullet(player.left));\n}\n\nfunction interval(func, wait, times){\n    var interv = function(w, t){\n        return function(){\n            if(typeof t === \"undefined\" || t-- > 0){\n                setTimeout(interv, w);\n                try{\n                    func.call(null);\n                }\n                catch(e){\n                    t = 0;\n                    throw e.toString();\n                }\n            }\n        };\n    }(wait, times);\n\n    setTimeout(interv, wait);\n};\n\nfunction runLoop () {\n  if (ALIVE) {\n    // term.clear();\n    generateMobs();\n    paintScreen();\n  }\n};\n\nexport { gameState, checkIntersects, checkBullet, SCORE, addScore, startGame, fire, player, gameOver };","/home/travis/build/npmtest/node-npmtest-nplaym/node_modules/nplaym/src/index.js":"'use strict';\n\nimport { startGame } from './game.js';\nimport { startListening } from './io.js';\nimport { execSync } from 'child_process';\n\nconst npmVersion = parseInt(execSync('npm --version').toString());\nif (npmVersion < 3) {\n  console.log('This game only works properly with NPM 3, please consider upgrading!')\n}\n\nstartListening();\nstartGame();\n","/home/travis/build/npmtest/node-npmtest-nplaym/node_modules/nplaym/src/io.js":"import { HEIGHT, WIDTH, LEFTWALL, RIGHTWALL, MIDWIDTH, MIDHEIGHT, FPS, FRAMERATE, DIFFICULTY, STARTTIME, PLAYERLINE } from './constants.js';\nimport keypress from 'keypress';\nimport pty from 'child_pty';\nimport { fire, player, gameOver } from './game.js'\nimport argsparse from './parser.js'\nimport term from './terminal.js';\n\nconst args = process.argv.slice(2);\n\nargsparse.set(args);\n\nlet npmOutput = '';\n\nconst npm = pty.spawn('npm', args, {\n  cwd: process.cwd()\n})\n\nconst installingPackages = {};\n\nfunction startListening () {\n  npm.stdout.on('data', d => {\n    var str = d.toString();\n    if (str.length > 10) {\n      npmOutput = str;\n    }\n    // We store it as keys in an object to quickly uniq them\n    const output = argsparse.parse(d);\n    if (!output) {\n      return;\n    }\n    let pkgs;\n    if (typeof output === 'string') {\n      pkgs = output.split(' ');\n    } else {\n      pkgs = output;\n    }\n    pkgs.forEach(pkg => {\n      installingPackages[pkg] = 1;\n    })\n  });\n\n  npm.stdout.on('end', d => {\n    gameOver(true);\n  });\n\n  npm.on('close', d => {\n    gameOver(true);\n  });\n\n  process.on('exit', function () {\n    npm.kill('SIGINT');\n    term.showCursor();\n  });\n\n  process.stdin.setRawMode(true);\n\n  term.hideCursor();\n\n  keypress(process.stdin);\n\n  process.stdin.on('keypress', function (chunk, key) {\n    if (!key) return; \n    if (key.ctrl && key.name == 'c') {\n      process.exit(1);\n    }\n    switch (key.name) {\n      case 'left':\n        term.right(1);\n        player.left = Math.max(player.left - 1, LEFTWALL);\n      break;\n      case 'right':\n        term.left(1);\n        player.left = Math.min(player.left + 1, WIDTH - RIGHTWALL);\n      break;\n      case 'space':\n        term.left(1);\n        fire();\n      break;\n    }\n  });\n\n}\n\n\nexport { startListening, installingPackages, npmOutput }","/home/travis/build/npmtest/node-npmtest-nplaym/node_modules/nplaym/src/parser.js":"import _ from 'lodash';\nimport util from './util.js';\n\nlet setting, args;\n\nconst Parser = {};\n\nParser.set = function (terms) {\n  const strippedTerms = _.clone(terms);\n  _.remove(strippedTerms, i => /^-/.test(i))\n if (strippedTerms[0] === 'install' ||  strippedTerms[0] === 'i') {\n   if (strippedTerms.length === 1) {\n     setting = 'npmInstall';\n   } else {\n     setting = 'npmInstallSomething';\n   }\n } else {\n   setting = 'default';\n }\n args = strippedTerms;\n}\n\nParser.parse = function (d) {\n  switch (setting) {\n    case 'npmInstall':\n      const bits = d.toString().match(/:[a-zA-Z0-9\\-_]+/)\n      if (bits) {\n        const packName = bits[0].slice(1);\n        return packName;\n      }\n      return util.getRandom(args);\n    break;\n    case 'npmInstallSomething':\n      const moreBits = d.toString().match(/:[a-zA-Z0-9\\-_]+/)\n      if (moreBits) {\n        const depName = moreBits[0].slice(1);\n        return depName;\n      }\n      return args;\n    break;\n    default:\n      const justLetters = d.toString().replace(/[^a-zA-Z0-9]+/g, '');\n      const noColourCodes = justLetters.replace(/[\\d]+m/, ' ');\n      return noColourCodes;\n    break;\n  }\n}\n\n\n\nexport default Parser;","/home/travis/build/npmtest/node-npmtest-nplaym/node_modules/nplaym/src/terminal.js":"\n// Terminal object\n// Allows for controlling the terminal by outputting control characters\nvar terminal = {\n    // Terminal escape character\n    // escape_code: '\\033',\n    escape_code: '\\x1B',\n\n    // Display attributes reset\n    // reset_code: '\\033[0m',\n    reset_code: '\\x1B[0m',\n\n    // Write a message in the terminal\n    write: function(message) {\n        process.stdout.write(message);\n        return this;\n    },\n\n    // Print one or more new line characters\n    nl: function(n) {\n        n = n || 1;\n        for (var i = 0; i < n; i++) {\n            process.stdout.write('\\n');\n        }\n        return this;\n    },\n\n    // Move the terminal cursor\n    move: function(x, y) {\n        x = x || 0;\n        y = y || 0;\n\n        var command = this.escape_code + '[';\n        if (undefined !== x && 0 < x) {\n            command += ++x;\n        }\n        if (undefined !== y && 0 < y) {\n            command += ';' + ++y ;\n        }\n\n        process.stdout.write(command + 'H');\n        return this;\n    },\n\n    // Move the terminal cursor up `x` positions\n    up: function(x) {\n        process.stdout.write(this.escape_code + '[' + x + 'A');\n        return this;\n    },\n\n    // Move the terminal cursor down x positions\n    down: function(x) {\n        process.stdout.write(this.escape_code + '[' + x + 'B');\n        return this;\n    },\n\n    // Move the terminal cursor `p` positions right\n    right: function(p) {\n        process.stdout.write(this.escape_code + '[' + p + 'C');\n        return this;\n    },\n\n    // Move the terminal cursor `p` positions left\n    left: function(p) {\n        process.stdout.write(this.escape_code + '[' + p + 'D');\n        return this;\n    },\n\n    // Clear all characters from the terminal screen\n    clear: function() {\n        process.stdout.write(this.escape_code + '[2J' + this.escape_code + '[;H');\n        return this;\n    },\n\n    // Clear the line the cursor is at\n    clearLine: function() {\n        process.stdout.write(this.escape_code + '[2K');\n        return this;\n    },\n\n    // Clear the next `n` characters from the current cursor position.\n    clearCharacters: function(n) {\n        this.write(new Array(n + 2).join(' ')).left(n + 2);\n        return this;\n    },\n\n    hideCursor: function() {\n        process.stdout.write(this.escape_code + '[?25l');\n    },\n\n    showCursor: function() {\n        process.stdout.write(this.escape_code + '[?25h');\n    }\n};\n\n// Export the command object\nexport default terminal;","/home/travis/build/npmtest/node-npmtest-nplaym/node_modules/nplaym/src/util.js":"\nconst utils = {\n  getRandom: function (arr) {\n    return arr[~~(Math.random() * arr.length)];\n  }\n};\n\nexport default utils;"}